type Query {
	users(query: String): [User!]!
	user(id: ID!): User
	posts(query: String): [Post!]!
	post(id: ID!): Post
	comments: [Comment!]!
	comment(id: ID!): Comment
}

type User {
	id: ID!
	name: String!
	email: String!
	posts: [Post!]!
	comments: [Comment!]!
}

type Post {
	id: ID!
	title: String!
	body: String
	published: Boolean!
	author: User!
	comments: [Comment!]!
}

type Comment {
	id: ID!
	user: User!
	post: Post!
	text: String!
	createdAt: String!
}

type Mutation {
	createUser(data: CreateUserInput!): User!
	createPost(data: CreatePostInput!): Post!
	createComment(data: CreateCommentInput!): Comment!
	deleteUser(id: ID!): User!
	deletePost(id: ID!): Post!
	deleteComment(id: ID!): Comment!
	updateUser(id: ID!, data: UpdateUserInput!): User!
	updatePost(id: ID!, data: UpdatePostInput!): Post!
	updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

input CreateUserInput {
	name: String!
	email: String!
}

input CreatePostInput {
	title: String!
	body: String
	published: Boolean!
	author: ID!
}

input CreateCommentInput {
	user: ID!
	post: ID!
	text: String!
}

input UpdateUserInput {
	name: String
	email: String
}

input UpdatePostInput {
	title: String
	body: String
	published: Boolean
}

input UpdateCommentInput {
	text: String
}

type Subscription {
	count: Int!
	comment(postId: ID!): CommentSubscriptionPayload!
	post: PostSubscriptionPayload!
}

type CommentSubscriptionPayload {
	mutation: String!
	data: Comment!
}

type PostSubscriptionPayload {
	mutation: String!
	data: Post!
}
